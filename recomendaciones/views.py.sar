from django.shortcuts import render
from django.db.models import Q
from rest_framework.response import Response
from rest_framework.views import APIView
from perfil_grupal.serializer import *
from perfil_grupal.models import Recommendation
import pandas as pd
from surprise import Dataset
from surprise import Reader
import surprise.dump
import sys
from os.path import dirname, join
import json
from .apps import RecomendacionesConfig
import math
import numpy as np


class RecomemendationAPIView(APIView):
    def get_queryset(self, queryItemId, queryGroupId):
        if not queryItemId and not queryGroupId:
            return Recommendation.objects.all()
        else:
            # return Recommendation.objects.filter(Q(itemId__exact=queryItemId) | Q(feedback__groupId__exact=queryGroupId))
            return self.generateRecomendations(queryGroupId)

    def get(self, request):
        queryItemId = request.GET.get('itemId')
        queryGroupId = request.GET.get('groupId')

        # groupInfo = self.get_queryset(queryItemId, queryGroupId)
        # serializer = RecomemendationSerializer(groupInfo, many=True)
        print("Recibo request")
        recs = self.generateRecomendations(queryGroupId)
        print("Recomendaciones listas y respondiendo")
        return Response(recs)


    def generateRecomendations(self, cluster):
        print("Computando recomendaciones")
        data_recs_asr = self.generate_group_recommendations(cluster)
        print("IDs a recomendar", data_recs_asr)
        final_recs = []
        for ids in data_recs_asr:
            final_recs.append({'itemId':(ids),
                                'title': self.itemIdToMaterial(ids),
                                'location': self.itemIdToLocation(ids),
                                'author': self.itemIdToAuthor(ids),
                                'userId':cluster,
                                'dewey': self.itemIdToDewey(ids),
                                'themes': self.itemIdToThemes(ids)})

        print("Recomendaciones finales", final_recs)
        return final_recs

    def generate_group_recommendations(self, cluster):
        df_pesos_full = RecomendacionesConfig.lib_group_pert.copy()
        predictor = RecomendacionesConfig.predictor

        pertenencias = df_pesos_full.loc[df_pesos_full["IDUsuario"] == cluster]
        grupos = pertenencias["Cluster"].unique()
        preds = {}
        for gr in grupos:
            print("DEWEY:", gr)
            data_preds = predictor.recommend_k_items( pd.DataFrame(dict(userID=[int(gr)])), remove_seen=False)
            preds[gr] = list(data_preds['itemID'])

        final_preds = []
        for key, value in preds.items():
            pert = pertenencias.loc[pertenencias["Cluster"] == key]["Pertenencia"].values[0]
            if pert < 0.1:
                pert = 0.1
            else:
                pert = round(pert,1)

            many_to_take = int(10 * pert)
            if many_to_take > 0 and len(preds[key]) > 0:
                recs_to_add = np.random.choice(preds[key], many_to_take)
                final_preds.extend(recs_to_add)

        print("Pre send", final_preds)
        return final_preds

    def itemIdToMaterial(self, itemId):
        # print("Calculando id a titulo")
        found = (RecomendacionesConfig.lib_material.loc[
            RecomendacionesConfig.lib_material['Llave'] == itemId
            ]['Titulo'].unique())
        if len(found) > 0:
           return found[0]
        else:
            return ''

    def itemIdToLocation(self, itemId):
        # print("Calculando id a titulo")
        found = (RecomendacionesConfig.lib_material.loc[
            RecomendacionesConfig.lib_material['Llave'] == itemId
            ]['Signatura'].unique())
        if len(found) > 0:
           return found[0]
        else:
            return ''

    def itemIdToAuthor(self, itemId):
        # print("Calculando id a titulo")
        found = (RecomendacionesConfig.lib_material.loc[
            RecomendacionesConfig.lib_material['Llave'] == itemId
            ]['Autor'].unique())
        if len(found) > 0:
           return found[0]
        else:
            return ''

    def itemIdToDewey(self, itemId):
        # print("Calculando id a dewey")
        found = (RecomendacionesConfig.lib_material.loc[
            RecomendacionesConfig.lib_material['Llave'] == itemId
            ]['Dewey'].unique())
        if len(found) > 0:
           return found[0]
        else:
            return ''

    def itemIdToThemes(self, itemId):
        # print("Calculando id a temas")
        tematicas = RecomendacionesConfig.lib_themes.loc[
            RecomendacionesConfig.lib_themes['Llaves'] == str(itemId)
            ]['Tema 670'].values
        if len(tematicas) == 0:
            return []
        else:
            return tematicas
